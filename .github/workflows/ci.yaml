name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Note: if: success() is used in several jobs -
# this ensures that it only executes if all previous jobs succeeded.

# if: steps.cache-yarn.outputs.cache-hit != 'true'
# will skip running `yarn install` if it successfully fetched from cache

jobs:
  prebuild:
    name: Pre-build checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Fetch dependencies from cache
        id: cache-yarn
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-amd64-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Run yarn fmt
        run: yarn fmt
        if: success()

      - name: Run yarn lint
        run: yarn lint
        if: success()

      - name: Run code-server unit tests
        run: yarn test:unit
        if: success()

  build:
    name: Build
    needs: prebuild
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Fetch dependencies from cache
        id: cache-yarn
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-amd64-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Build code-server
        run: yarn build

      - name: Build vscode
        run: yarn build:vscode
        if: success()

      # The release package does not contain any native modules
      # and is neutral to architecture/os/libc version.
      - name: Create release package
        run: yarn release
        if: success()

      # https://github.com/actions/upload-artifact/issues/38
      - name: Compress release package
        run: tar -czf package.tar.gz release

      - name: Upload npm package artifact
        uses: actions/upload-artifact@v2
        with:
          name: npm-package
          path: ./package.tar.gz

  linux-amd64:
    name: Linux x86-64 build
    needs: build

    # We use Ubuntu 16.04 here, so that our build is more compatible
    # with older libc versions. We used to (Q1'20) use CentOS 7 here,
    # but it has a full update EOL of Q4'20 and a 'critical security'
    # update EOL of 2024. We're dropping our full support 3 quarters
    # early, but this gets us CI speed benefits on GH.

    # TODO: cache building here
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: Install node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Download npm package
        uses: actions/download-artifact@v2
        with:
          name: npm-package

      - name: Decompress npm package
        run: tar -xzf package.tar.gz

      - name: Build and test yarn package
        run: |
          yarn release:standalone
          yarn test:standalone-release
          yarn package

      - name: Upload release artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-packages
          path: ./release-packages

  test-e2e:
    needs: linux-amd64
    runs-on: ubuntu-latest
    env:
      PASSWORD: e45432jklfdsab
      CODE_SERVER_ADDRESS: http://localhost:8080
    steps:
      - uses: actions/checkout@v2

      - name: Download release packages
        uses: actions/download-artifact@v2
        with:
          name: release-packages
          path: ./release-packages

      - name: Untar code-server file
        run: |
          cd release-packages && tar -xzf code-server*-linux-amd64.tar.gz

      - uses: microsoft/playwright-github-action@v1

      - name: Install dependencies and run end-to-end tests
        run: |
          ./release-packages/code-server*-linux-amd64/bin/code-server &
          yarn --frozen-lockfile
          yarn test:e2e

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-videos
          path: ./test/e2e/videos

      - name: Remove release packages and test artifacts
        run: rm -rf ./release-packages ./test/e2e/videos
